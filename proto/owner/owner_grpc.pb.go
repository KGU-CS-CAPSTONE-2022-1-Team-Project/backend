// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/owner/owner.proto

package owner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OwnerClient is the client API for Owner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OwnerClient interface {
	Google(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GoogleCallBack(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SaveAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	GetChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelResponse, error)
	SetAnnoymousUser(ctx context.Context, in *NicknameRequest, opts ...grpc.CallOption) (*NicknameResponse, error)
	GetAnnoymousUser(ctx context.Context, in *NicknameRequest, opts ...grpc.CallOption) (*NicknameResponse, error)
}

type ownerClient struct {
	cc grpc.ClientConnInterface
}

func NewOwnerClient(cc grpc.ClientConnInterface) OwnerClient {
	return &ownerClient{cc}
}

func (c *ownerClient) Google(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Owner/Google", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) GoogleCallBack(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/Owner/GoogleCallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) SaveAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/Owner/SaveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) GetChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelResponse, error) {
	out := new(ChannelResponse)
	err := c.cc.Invoke(ctx, "/Owner/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) SetAnnoymousUser(ctx context.Context, in *NicknameRequest, opts ...grpc.CallOption) (*NicknameResponse, error) {
	out := new(NicknameResponse)
	err := c.cc.Invoke(ctx, "/Owner/SetAnnoymousUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) GetAnnoymousUser(ctx context.Context, in *NicknameRequest, opts ...grpc.CallOption) (*NicknameResponse, error) {
	out := new(NicknameResponse)
	err := c.cc.Invoke(ctx, "/Owner/GetAnnoymousUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OwnerServer is the server API for Owner service.
// All implementations must embed UnimplementedOwnerServer
// for forward compatibility
type OwnerServer interface {
	Google(context.Context, *LoginRequest) (*LoginResponse, error)
	GoogleCallBack(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SaveAddress(context.Context, *AddressRequest) (*AddressResponse, error)
	GetChannel(context.Context, *ChannelRequest) (*ChannelResponse, error)
	SetAnnoymousUser(context.Context, *NicknameRequest) (*NicknameResponse, error)
	GetAnnoymousUser(context.Context, *NicknameRequest) (*NicknameResponse, error)
	mustEmbedUnimplementedOwnerServer()
}

// UnimplementedOwnerServer must be embedded to have forward compatible implementations.
type UnimplementedOwnerServer struct {
}

func (UnimplementedOwnerServer) Google(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Google not implemented")
}
func (UnimplementedOwnerServer) GoogleCallBack(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleCallBack not implemented")
}
func (UnimplementedOwnerServer) SaveAddress(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAddress not implemented")
}
func (UnimplementedOwnerServer) GetChannel(context.Context, *ChannelRequest) (*ChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedOwnerServer) SetAnnoymousUser(context.Context, *NicknameRequest) (*NicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnnoymousUser not implemented")
}
func (UnimplementedOwnerServer) GetAnnoymousUser(context.Context, *NicknameRequest) (*NicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnoymousUser not implemented")
}
func (UnimplementedOwnerServer) mustEmbedUnimplementedOwnerServer() {}

// UnsafeOwnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OwnerServer will
// result in compilation errors.
type UnsafeOwnerServer interface {
	mustEmbedUnimplementedOwnerServer()
}

func RegisterOwnerServer(s grpc.ServiceRegistrar, srv OwnerServer) {
	s.RegisterService(&Owner_ServiceDesc, srv)
}

func _Owner_Google_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).Google(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Owner/Google",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).Google(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_GoogleCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).GoogleCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Owner/GoogleCallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).GoogleCallBack(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_SaveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).SaveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Owner/SaveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).SaveAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Owner/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).GetChannel(ctx, req.(*ChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_SetAnnoymousUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).SetAnnoymousUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Owner/SetAnnoymousUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).SetAnnoymousUser(ctx, req.(*NicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_GetAnnoymousUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).GetAnnoymousUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Owner/GetAnnoymousUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).GetAnnoymousUser(ctx, req.(*NicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Owner_ServiceDesc is the grpc.ServiceDesc for Owner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Owner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Owner",
	HandlerType: (*OwnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Google",
			Handler:    _Owner_Google_Handler,
		},
		{
			MethodName: "GoogleCallBack",
			Handler:    _Owner_GoogleCallBack_Handler,
		},
		{
			MethodName: "SaveAddress",
			Handler:    _Owner_SaveAddress_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _Owner_GetChannel_Handler,
		},
		{
			MethodName: "SetAnnoymousUser",
			Handler:    _Owner_SetAnnoymousUser_Handler,
		},
		{
			MethodName: "GetAnnoymousUser",
			Handler:    _Owner_GetAnnoymousUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/owner/owner.proto",
}
